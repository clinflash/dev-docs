import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as c,c as o,e as p,a as s,d as n,b as l,w as i,f as d}from"./app-f61a1612.js";const r={},u=s("h1",{id:"代码风格",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#代码风格","aria-hidden":"true"},"#"),n(" 代码风格")],-1),k={class:"hint-container tip"},m=s("p",{class:"hint-container-title"},"提示",-1),v=s("p",null,[n("多观察 IDE 里 "),s("code",null,"Dart Analysis"),n(" 或 "),s("code",null,"Problems"),n(" 标签页中的警告和提示并及时修复。")],-1),h=s("code",null,"代码格式化",-1),_=s("code",null,"优化导入",-1),b=s("a",{href:"#%E8%87%AA%E5%8A%A8%E6%A0%BC%E5%BC%8F%E5%8C%96"},"自动格式化",-1),g=d(`<h2 id="命名" tabindex="-1"><a class="header-anchor" href="#命名" aria-hidden="true">#</a> 命名</h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>请勿使用 <code>拼音</code> 进行命名！特殊情况除外。</p></div><p>在 <code>packages</code>、<code>directories</code>、<code>source files</code> 中使用 <code>lowercase_with_underscores</code> 方式命名。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>my_package
└── lib
    └── my_directory
        ├── file_system.dart
        └── slider_menu.dart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>import prefixes</code> 中使用 <code>lowercase_with_underscores</code> 方式命名。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:url_launcher/url_launcher.dart&#39;</span></span> <span class="token operator">as</span> url_launcher<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <code>classes</code>、<code>enum types</code>、<code>typedefs</code>、<code>type parameters</code>、<code>extensions</code> 中使用 <code>UpperCamelCase</code> 方式命名。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">SliderMenu</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">StatusType</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token keyword">typedef</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token operator">=</span> bool <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">extension</span> <span class="token class-name">MyFancyList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">on</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动格式化" tabindex="-1"><a class="header-anchor" href="#自动格式化" aria-hidden="true">#</a> 自动格式化</h2><p>在终端跑<code>dart fix --apply</code></p><p>保存自动修复，例如自动添加<code>const</code>等，在<code>setting.json</code>中添加配置。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;editor.codeActionsOnSave&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;source.fixAll&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function y(f,x){const a=t("RouterLink");return c(),o("div",null,[u,p(" more "),s("div",k,[m,v,s("p",null,[n("多用 "),h,n(" 和 "),_,n(),l(a,{to:"/flutter/shortcuts.html"},{default:i(()=>[n("快捷键")]),_:1}),n(" 整理代码，或者使用"),b,n("。")])]),g])}const C=e(r,[["render",y],["__file","style.html.vue"]]);export{C as default};
